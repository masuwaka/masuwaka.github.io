<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://masuwaka.net/feed.xml" rel="self" type="application/atom+xml"/><link href="https://masuwaka.net/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-08-20T16:28:46+00:00</updated><id>https://masuwaka.net/feed.xml</id><title type="html">masuwaka’s technical notes</title><subtitle>Technical insights on AI, signal processing, and system administration. Deep dives into machine learning, networking, and software engineering. </subtitle><entry><title type="html">Dynamic DNS with Cloudflare and ddclient: Complete Ubuntu 24.04 Setup Guide</title><link href="https://masuwaka.net/blog/2025/08/20/dynamic-dns-cloudflare-ddclient-ubuntu-setup/" rel="alternate" type="text/html" title="Dynamic DNS with Cloudflare and ddclient: Complete Ubuntu 24.04 Setup Guide"/><published>2025-08-20T00:00:00+00:00</published><updated>2025-08-20T00:00:00+00:00</updated><id>https://masuwaka.net/blog/2025/08/20/dynamic-dns-cloudflare-ddclient-ubuntu-setup</id><content type="html" xml:base="https://masuwaka.net/blog/2025/08/20/dynamic-dns-cloudflare-ddclient-ubuntu-setup/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>When deploying web applications (e.g., blog, VPN, SSH) on a home server,<br/> it is helpful to link the server’s IP to a domain name.</p> <p>While one may access their home server using its global IP,<br/> the IP is not necessarily fixed but changes dynamically over time.</p> <p>Nevertheless, keeping track of the home server’s IP is difficult,<br/> and sometimes impossible, e.g., when you are away from home.</p> <p>In such cases, constantly updating the link between the changing home server’s IP and a domain name using <strong>DDNS (Dynamic Domain Name System)</strong> is helpful;<br/> you can access your home server via the domain name, without being aware of the current IP.</p> <p>Therefore, many people individually acquire their own domains and link them to their home servers’ IPs using DDNS,<br/> and <strong><a href="https://ddclient.net/"><code class="language-plaintext highlighter-rouge">ddclient</code></a> is popular for dynamic updating the link</strong>.</p> <p>Like many others, I also registered my domain with <a href="https://domains.google/">Google Domains</a> and linked it to my home IP with <code class="language-plaintext highlighter-rouge">ddclient</code>.<br/> However, Google withdrew from domain registration service in 2023 and migrated all their domains to <a href="https://domains.squarespace.com/">Squarespace</a>.</p> <p>Nevertheless, Squarespace does not support DDNS;<br/> <strong>we must edit DNS records manually, which is troublesome for users whose IPs change frequently.</strong></p> <p>So <strong>I changed my domain registrar from Squarespace to <a href="https://www.cloudflare.com/products/registrar/">Cloudflare</a>,<br/> where it supports DDNS</strong> and other convenient networking services.</p> <p>In this post, <strong>I provide a setup manual for <code class="language-plaintext highlighter-rouge">ddclient</code> to constantly update Cloudflare’s DNS records</strong>.</p> <p>With this manual, <strong>I believe that you can easily (in 10~15 minutes) complete your DDNS configuration.</strong></p> <h2 id="prerequisites">Prerequisites</h2> <ul> <li>Ubuntu 24.04.3 LTS</li> <li>Cloudflare account with domain</li> <li>Basic Linux command line knowledge</li> </ul> <h2 id="step-1-create-cloudflare-api-and-dns-record-configuration">Step 1: Create Cloudflare API and DNS Record Configuration</h2> <h3 id="step-1-1-creating-api-token">Step 1-1: Creating API Token</h3> <p>I assume that your domain has already been registered with or migrated to Cloudflare.</p> <p>After logging into <a href="https://dash.cloudflare.com">Cloudflare</a>, <strong>you can see your domains</strong> as follows; In my case, “masuwaka.net” is shown. <strong>Click it</strong>.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/20250820/Cloudflare1-480.webp 480w,/assets/img/20250820/Cloudflare1-800.webp 800w,/assets/img/20250820/Cloudflare1-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/20250820/Cloudflare1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Cloudflare - Account home" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption">Account home</figcaption> </figure> <p>Then, an overview of the domain is shown.</p> <p>While it’s a little hard to find, <strong>a text link of “DNS Records” can be seen on the right-side. Click it.</strong></p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/20250820/Cloudflare2-480.webp 480w,/assets/img/20250820/Cloudflare2-800.webp 800w,/assets/img/20250820/Cloudflare2-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/20250820/Cloudflare2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Cloudflare - Overview" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption">Account home &gt; Overview</figcaption> </figure> <p>Then we can see DNS records for the domain.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/20250820/Cloudflare3-480.webp 480w,/assets/img/20250820/Cloudflare3-800.webp 800w,/assets/img/20250820/Cloudflare3-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/20250820/Cloudflare3.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Cloudflare - DNS Records" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption">Account home &gt; Overview &gt; DNS Records</figcaption> </figure> <p>In my case, three CNAMEs are shown.<br/> However <strong>you might see only one CNAME record with name “_domainconnect”.<br/> Don’t worry. It is OK and leave it as is for now.</strong></p> <p>While we will come back to this “Record” page in the next subsection,<br/> <strong>we are going to get an API key before editing DNS records;<br/> Please go to the page of “<a href="https://dash.cloudflare.com/profile/api-tokens">User API tokens</a>“</strong></p> <p>On the API tokens’ page, <strong>click the button “Create Token”, and then click “Use template” button for Edit zone DNS.</strong></p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/20250820/Cloudflare4-480.webp 480w,/assets/img/20250820/Cloudflare4-800.webp 800w,/assets/img/20250820/Cloudflare4-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/20250820/Cloudflare4.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Cloudflare - User API Tokens" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption">My Profile &gt; API Tokens</figcaption> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/20250820/Cloudflare5-480.webp 480w,/assets/img/20250820/Cloudflare5-800.webp 800w,/assets/img/20250820/Cloudflare5-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/20250820/Cloudflare5.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Cloudflare - User API Tokens - Create Token" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption">My Profile &gt; API Tokens &gt; Create Token</figcaption> </figure> <p>In the template, the only thing you have to edit is the dropdown boxes in <strong>“Zone Resources”</strong> section unless there is some special reason;<br/> as <strong>“include” &gt; “All zones from an account” &gt; “&lt;Your e-mail&gt;’s Account”</strong>.</p> <p><strong>Then click “Continue to summary” button.</strong></p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/20250820/Cloudflare6-480.webp 480w,/assets/img/20250820/Cloudflare6-800.webp 800w,/assets/img/20250820/Cloudflare6-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/20250820/Cloudflare6.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Cloudflare - User API Tokens - Create Token" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption">My Profile &gt; API Tokens &gt; Create Toke &gt; Edit zone DNS</figcaption> </figure> <p>At this time, you will see the confirmation page.<br/> If the content is OK, <strong>click “Create Token” button and then API token is created.</strong></p> <p>Then, <strong>please copy the API token and paste anywhere like text-edit app (we will use it later).</strong><br/> It should be noted that the API token created will not be shown again after the page is closed.</p> <h3 id="step-1-2-dns-record-configuration">Step 1-2: DNS Record Configuration</h3> <p><strong>Back to the “<a href="https://dash.cloudflare.com/dns/records">DNS Records</a>” page.</strong></p> <p><strong>Click “Add record” button</strong> and assign A record (IPv4 address) to your domain.</p> <p><strong>The parts you have to edit are; “Name”, “IPv4 address”, and “Proxy status”.</strong><br/> “Type” will be set to “A” in default and leave it as is.</p> <p>The <strong>“Name” is subdomain</strong> and set it to “@” corresponds to root domain, e.g., in my case, “masuwaka.net”.<br/> <strong>If you intend to set other subdomain, like “www.masuwaka.net”, input “www” to the “Name”.</strong></p> <p><strong>It is OK to set the IPv4 address to any temporary values.</strong><br/> In my sample, it is set to “123.123.123.123”.<br/> <strong>This will be updated by actual home server’s IP with <code class="language-plaintext highlighter-rouge">ddclient</code> later.</strong></p> <p><strong>Enable “Proxy status” hides the actual home server’s IP from public</strong>, protecting the server from malicious access.<br/> Enabling it is recommended for security reason but <strong>switch it to off if you directly access the home server.</strong></p> <p>Editing “Comment” form in “Record Attributes” is optional.<br/> But filling this form with some label makes it easier to identify the meaning of the record.</p> <p><strong>When setting the DNS record is done, click “Save” button registers the record.</strong></p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/20250820/Cloudflare7-480.webp 480w,/assets/img/20250820/Cloudflare7-800.webp 800w,/assets/img/20250820/Cloudflare7-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/20250820/Cloudflare7.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Cloudflare - DNS Records" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption">Account home &gt; Overview &gt; DNS Records</figcaption> </figure> <p>For example, I created two A records;</p> <ol> <li>“vpn.masuwaka.net” without proxy</li> <li>“ssh.masuwaka.net” with proxy.</li> </ol> <p><strong>What is important to remember is that the IPs for both domains are still “123.123.123.123” at this time.<br/> These IPs will be dynamically updated with <code class="language-plaintext highlighter-rouge">ddclient</code> later.</strong></p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/20250820/Cloudflare8-480.webp 480w,/assets/img/20250820/Cloudflare8-800.webp 800w,/assets/img/20250820/Cloudflare8-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/20250820/Cloudflare8.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Cloudflare - DNS Records" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption">Account home &gt; Overview &gt; DNS Records</figcaption> </figure> <h2 id="step-2-installing-and-setup-ddclient-configuration">Step 2: Installing and Setup <code class="language-plaintext highlighter-rouge">ddclient</code> Configuration</h2> <h3 id="step-2-1-package-installation">Step 2-1: Package Installation</h3> <p>From here, install <code class="language-plaintext highlighter-rouge">ddclient</code> package.<br/> The installation is quite simple as follows:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>apt update
<span class="nv">$ </span><span class="nb">sudo </span>apt <span class="nb">install </span>ddclient
</code></pre></div></div> <p>On installation, you may be asked some questions.<br/> Then, answer them as follows:.</p> <ol> <li>“DDNS provider”: Choose “other” &gt; “cloudflare”.</li> <li>“Username”: Set empty.</li> <li>“Password”: Set the API token noted above.</li> <li>“IP discovery method”: Select “Web-based IP discovery service”</li> <li>“Hosts to update”: filled with the domains registered as A records above.<br/> (in comma-separated fashion, as, “vpn.masuwaka.net,ssh.masuwaka.net”)</li> </ol> <p><strong>If you were not asked to input the above information, or answered differently, don’t worry!<br/> We will check and set them manually later!</strong></p> <h3 id="step-2-2-configuration-file-setup">Step 2-2: Configuration File Setup</h3> <p>The configuration file of <code class="language-plaintext highlighter-rouge">ddclient</code> is <code class="language-plaintext highlighter-rouge">/etc/ddclient.conf</code></p> <p><strong>Please check and edit it even if you set the configuration in install time.</strong><br/> Because using the preset configuration may lead to failure.</p> <p>The configuration file must be edited by sudoer, as <code class="language-plaintext highlighter-rouge">sudo nano /etc/ddclient.conf</code>:</p> <div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">ssl</span><span class="p">=</span><span class="s">yes</span>

<span class="py">protocol</span><span class="p">=</span><span class="s">cloudflare </span><span class="se">\
</span><span class="s">use=web, web=api.ipify.org </span><span class="se">\
</span><span class="s">zone=masuwaka.net </span><span class="se">\
</span><span class="s">password='&lt;API token&gt;' </span><span class="se">\
</span><span class="s">vpn.masuwaka.net,ssh.masuwaka.net</span>
</code></pre></div></div> <p>The points are:</p> <ol> <li>If “zone” property is none, set it to root domain.</li> <li>If “login” property exist, comment out or delete the row.</li> <li>Both are OK the API token is wrapped by quotations or not.</li> <li>“vpn.masuwaka.net,ssh.masuwaka.net” must be replaced with your (sub)domains registered above.</li> <li>Do not miss the backslash.</li> </ol> <h2 id="step-3-cloudflare-api-testing-and-ip-update-with-ddclient">Step 3: Cloudflare API Testing and IP Update with <code class="language-plaintext highlighter-rouge">ddclient</code></h2> <h3 id="step-3-1-api-testing">Step 3-1: API Testing</h3> <p>Check access to the Cloudflare API by the following command.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl <span class="s2">"https://api.cloudflare.com/client/v4/user/tokens/verify"</span> <span class="nt">-H</span> <span class="s2">"Authorization: Bearer &lt;API token&gt;"</span>
<span class="o">{</span><span class="s2">"result"</span>:<span class="o">{</span><span class="s2">"id"</span>:<span class="s2">"&lt;some id&gt;"</span>,<span class="s2">"status"</span>:<span class="s2">"active"</span><span class="o">}</span>,<span class="s2">"success"</span>:true,<span class="s2">"errors"</span>:[],<span class="s2">"messages"</span>:[<span class="o">{</span><span class="s2">"code"</span>:10000,<span class="s2">"message"</span>:<span class="s2">"This API Token is valid and active"</span>,<span class="s2">"type"</span>:null<span class="o">}]}</span>
</code></pre></div></div> <p>The message <code class="language-plaintext highlighter-rouge">"success":true</code> indicates the API access is valid.</p> <h3 id="step-3-2-ip-update-with-ddclient">Step 3-2: IP Update with <code class="language-plaintext highlighter-rouge">ddclient</code></h3> <p>If <code class="language-plaintext highlighter-rouge">/etc/ddclient.conf</code> is properly configured,<br/> You can see that the IP addresses for the domains are automatically updated to the home server’s IP.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/20250820/Cloudflare8-480.webp 480w,/assets/img/20250820/Cloudflare8-800.webp 800w,/assets/img/20250820/Cloudflare8-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/20250820/Cloudflare8.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Cloudflare - DNS Records" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption">Account home &gt; Overview &gt; DNS Record (Updated)</figcaption> </figure> <p><strong>However, this update may take a while. If you reflect them soon, run the following command:</strong></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>ddclient <span class="nt">-force</span>
SUCCESS:  updating ssh.masuwaka.net: IPv4 address <span class="nb">set </span>to &lt;home server<span class="s1">'s IP&gt;
SUCCESS:  updating vpn.masuwaka.net: IPv4 address set to &lt;home server'</span>s IP&gt;
</code></pre></div></div> <p>Once you can confirm the IP addresses on Cloudflare’s DNS records are updated,<br/> Then <code class="language-plaintext highlighter-rouge">ddclient</code> will regularly update DNS records automatically.</p> <h2 id="conclusion">Conclusion</h2> <p>In this post, I described how to update Cloudflare’s DNS records with your home server’s IP using ddclient.</p> <p>This setup provides several benefits:</p> <ul> <li>Automatic IP updates without manual intervention</li> <li>Secure access to your home server via domain names</li> <li>Cloudflare’s additional security features when proxy is enabled</li> </ul> <p>Once configured, ddclient will continuously monitor your IP address and update your DNS records automatically, ensuring your services remain accessible even when your ISP changes your IP address.</p> <p>I hope this guide helps you set up your own dynamic DNS solution!</p>]]></content><author><name></name></author><category term="tutorials"/><category term="ddclient"/><category term="cloudflare"/><category term="ubuntu"/><category term="dynamic-dns"/><category term="home-server"/><category term="networking"/><summary type="html"><![CDATA[A comprehensive guide to setting up dynamic DNS using Cloudflare and DDClient on Ubuntu 24.04. Perfect for home servers and self-hosted services.]]></summary></entry><entry><title type="html">a post with jupyter notebook</title><link href="https://masuwaka.net/blog/2023/07/04/jupyter-notebook/" rel="alternate" type="text/html" title="a post with jupyter notebook"/><published>2023-07-04T12:57:00+00:00</published><updated>2023-07-04T12:57:00+00:00</updated><id>https://masuwaka.net/blog/2023/07/04/jupyter-notebook</id><content type="html" xml:base="https://masuwaka.net/blog/2023/07/04/jupyter-notebook/"><![CDATA[<p>To include a jupyter notebook in a post, you can use the following code:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{::nomarkdown}
<span class="cp">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">jupyter_path</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'assets/jupyter/blog.ipynb'</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">relative_url</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">capture</span><span class="w"> </span><span class="nv">notebook_exists</span><span class="w"> </span><span class="cp">%}{%</span><span class="w"> </span><span class="nt">file_exists</span><span class="w"> </span>assets/jupyter/blog.ipynb<span class="w"> </span><span class="cp">%}{%</span><span class="w"> </span><span class="nt">endcapture</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">if</span><span class="w"> </span><span class="nv">notebook_exists</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s1">'true'</span><span class="w"> </span><span class="cp">%}</span>
  <span class="cp">{%</span><span class="w"> </span><span class="nt">jupyter_notebook</span><span class="w"> </span><span class="nv">jupyter_path</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">else</span><span class="w"> </span><span class="cp">%}</span>
  &lt;p&gt;Sorry, the notebook you are looking for does not exist.&lt;/p&gt;
<span class="cp">{%</span><span class="w"> </span><span class="nt">endif</span><span class="w"> </span><span class="cp">%}</span>
{:/nomarkdown}
</code></pre></div></div> <p>Let’s break it down: this is possible thanks to <a href="https://github.com/red-data-tools/jekyll-jupyter-notebook">Jekyll Jupyter Notebook plugin</a> that allows you to embed jupyter notebooks in your posts. It basically calls <a href="https://nbconvert.readthedocs.io/en/latest/usage.html#convert-html"><code class="language-plaintext highlighter-rouge">jupyter nbconvert --to html</code></a> to convert the notebook to an html page and then includes it in the post. Since <a href="https://jekyllrb.com/docs/configuration/markdown/">Kramdown</a> is the default Markdown renderer for Jekyll, we need to surround the call to the plugin with the <a href="https://kramdown.gettalong.org/syntax.html#extensions">::nomarkdown</a> tag so that it stops processing this part with Kramdown and outputs the content as-is.</p> <p>The plugin takes as input the path to the notebook, but it assumes the file exists. If you want to check if the file exists before calling the plugin, you can use the <code class="language-plaintext highlighter-rouge">file_exists</code> filter. This avoids getting a 404 error from the plugin and ending up displaying the main page inside of it instead. If the file does not exist, you can output a message to the user. The code displayed above outputs the following:</p> <p>Sorry, the notebook you are looking for does not exist.</p> <p>Note that the jupyter notebook supports both light and dark themes.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="jupyter"/><summary type="html"><![CDATA[an example of a blog post with jupyter notebook]]></summary></entry><entry><title type="html">a post with math</title><link href="https://masuwaka.net/blog/2015/10/20/math/" rel="alternate" type="text/html" title="a post with math"/><published>2015-10-20T15:12:00+00:00</published><updated>2015-10-20T15:12:00+00:00</updated><id>https://masuwaka.net/blog/2015/10/20/math</id><content type="html" xml:base="https://masuwaka.net/blog/2015/10/20/math/"><![CDATA[<p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine. You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p> <p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph. Here is an example:</p> \[\sum_{k=1}^\infty |\langle x, e_k \rangle|^2 \leq \|x\|^2\] <p>You can also use <code class="language-plaintext highlighter-rouge">\begin{equation}...\end{equation}</code> instead of <code class="language-plaintext highlighter-rouge">$$</code> for display mode math. MathJax will automatically number equations:</p> <p>\begin{equation} \label{eq:cauchy-schwarz} \left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right) \end{equation}</p> <p>and by adding <code class="language-plaintext highlighter-rouge">\label{...}</code> inside the equation environment, we can now refer to the equation using <code class="language-plaintext highlighter-rouge">\eqref</code>.</p> <p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="math"/><summary type="html"><![CDATA[an example of a blog post with some math]]></summary></entry><entry><title type="html">a post with code</title><link href="https://masuwaka.net/blog/2015/07/15/code/" rel="alternate" type="text/html" title="a post with code"/><published>2015-07-15T15:09:00+00:00</published><updated>2015-07-15T15:09:00+00:00</updated><id>https://masuwaka.net/blog/2015/07/15/code</id><content type="html" xml:base="https://masuwaka.net/blog/2015/07/15/code/"><![CDATA[<p>This theme implements a built-in Jekyll feature, the use of Rouge, for syntax highlighting. It supports more than 100 languages. This example is in C++. All you have to do is wrap your code in markdown code tags:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">c++
</span><span class="n">code</span> <span class="n">code</span> <span class="n">code</span>
<span class="p">```</span>
</code></pre></div></div> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>For displaying code in a list item, you have to be aware of the indentation, as stated in <a href="https://github.com/planetjekyll/quickrefs/blob/master/FAQ.md#q-how-can-i-get-backtick-fenced-code-blocks-eg--working-inside-lists-with-kramdown">this FAQ</a>. You must indent your code by <strong>(3 * bullet_indent_level)</strong> spaces. This is because kramdown (the markdown engine used by Jekyll) indentation for the code block in lists is determined by the column number of the first non-space character after the list item marker. For example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">1.</span> We can put fenced code blocks inside nested bullets, too.
<span class="p">
   1.</span> Like this:<span class="sb">

      ```c
      printf("Hello, World!");
      ```

</span><span class="p">   2.</span> The key is to indent your fenced block in the same line as the first character of the line.
</code></pre></div></div> <p>Which displays:</p> <ol> <li> <p>We can put fenced code blocks inside nested bullets, too.</p> <ol> <li> <p>Like this:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">printf</span><span class="p">(</span><span class="s">"Hello, World!"</span><span class="p">);</span>
</code></pre></div> </div> </li> <li> <p>The key is to indent your fenced block in the same line as the first character of the line.</p> </li> </ol> </li> </ol> <p>By default, it does not display line numbers. If you want to display line numbers for every code block, you can set <code class="language-plaintext highlighter-rouge">kramdown.syntax_highlighter_opts.block.line_numbers</code> to true in your <code class="language-plaintext highlighter-rouge">_config.yml</code> file.</p> <p>If you want to display line numbers for a specific code block, all you have to do is wrap your code in a liquid tag:</p> <p>{% highlight c++ linenos %} <br/> code code code <br/> {% endhighlight %}</p> <p>The keyword <code class="language-plaintext highlighter-rouge">linenos</code> triggers display of line numbers. Produces something like this:</p> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
<span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>

<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[an example of a blog post with some code]]></summary></entry></feed>